//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SA.VisualizationSystem.ActionsReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionData", Namespace="http://schemas.datacontract.org/2004/07/StrategyServices.Actions")]
    [System.SerializableAttribute()]
    public partial class ActionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BusinessIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DescriptionsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BusinessId {
            get {
                return this.BusinessIdField;
            }
            set {
                if ((this.BusinessIdField.Equals(value) != true)) {
                    this.BusinessIdField = value;
                    this.RaisePropertyChanged("BusinessId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descriptions {
            get {
                return this.DescriptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionsField, value) != true)) {
                    this.DescriptionsField = value;
                    this.RaisePropertyChanged("Descriptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DescriptionsList {
            get {
                return this.DescriptionsListField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionsListField, value) != true)) {
                    this.DescriptionsListField = value;
                    this.RaisePropertyChanged("DescriptionsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ActionsReference.IActionService")]
    public interface IActionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/GetActionsByLanguage", ReplyAction="http://tempuri.org/IActionService/GetActionsByLanguageResponse")]
        SA.VisualizationSystem.ActionsReference.ActionData[] GetActionsByLanguage(int languageId, int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/GetActionsByLanguage", ReplyAction="http://tempuri.org/IActionService/GetActionsByLanguageResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.ActionsReference.ActionData[]> GetActionsByLanguageAsync(int languageId, int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/GetActions", ReplyAction="http://tempuri.org/IActionService/GetActionsResponse")]
        SA.VisualizationSystem.ActionsReference.ActionData[] GetActions(int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/GetActions", ReplyAction="http://tempuri.org/IActionService/GetActionsResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.ActionsReference.ActionData[]> GetActionsAsync(int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/AddActions", ReplyAction="http://tempuri.org/IActionService/AddActionsResponse")]
        void AddActions(SA.VisualizationSystem.ActionsReference.ActionData[] newActions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/AddActions", ReplyAction="http://tempuri.org/IActionService/AddActionsResponse")]
        System.Threading.Tasks.Task AddActionsAsync(SA.VisualizationSystem.ActionsReference.ActionData[] newActions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/EditActions", ReplyAction="http://tempuri.org/IActionService/EditActionsResponse")]
        void EditActions(SA.VisualizationSystem.ActionsReference.ActionData[] actions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/EditActions", ReplyAction="http://tempuri.org/IActionService/EditActionsResponse")]
        System.Threading.Tasks.Task EditActionsAsync(SA.VisualizationSystem.ActionsReference.ActionData[] actions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/DeleteActions", ReplyAction="http://tempuri.org/IActionService/DeleteActionsResponse")]
        void DeleteActions(int[] actionsIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActionService/DeleteActions", ReplyAction="http://tempuri.org/IActionService/DeleteActionsResponse")]
        System.Threading.Tasks.Task DeleteActionsAsync(int[] actionsIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActionServiceChannel : SA.VisualizationSystem.ActionsReference.IActionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActionServiceClient : System.ServiceModel.ClientBase<SA.VisualizationSystem.ActionsReference.IActionService>, SA.VisualizationSystem.ActionsReference.IActionService {
        
        public ActionServiceClient() {
        }
        
        public ActionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SA.VisualizationSystem.ActionsReference.ActionData[] GetActionsByLanguage(int languageId, int businessId) {
            return base.Channel.GetActionsByLanguage(languageId, businessId);
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.ActionsReference.ActionData[]> GetActionsByLanguageAsync(int languageId, int businessId) {
            return base.Channel.GetActionsByLanguageAsync(languageId, businessId);
        }
        
        public SA.VisualizationSystem.ActionsReference.ActionData[] GetActions(int businessId) {
            return base.Channel.GetActions(businessId);
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.ActionsReference.ActionData[]> GetActionsAsync(int businessId) {
            return base.Channel.GetActionsAsync(businessId);
        }
        
        public void AddActions(SA.VisualizationSystem.ActionsReference.ActionData[] newActions) {
            base.Channel.AddActions(newActions);
        }
        
        public System.Threading.Tasks.Task AddActionsAsync(SA.VisualizationSystem.ActionsReference.ActionData[] newActions) {
            return base.Channel.AddActionsAsync(newActions);
        }
        
        public void EditActions(SA.VisualizationSystem.ActionsReference.ActionData[] actions) {
            base.Channel.EditActions(actions);
        }
        
        public System.Threading.Tasks.Task EditActionsAsync(SA.VisualizationSystem.ActionsReference.ActionData[] actions) {
            return base.Channel.EditActionsAsync(actions);
        }
        
        public void DeleteActions(int[] actionsIds) {
            base.Channel.DeleteActions(actionsIds);
        }
        
        public System.Threading.Tasks.Task DeleteActionsAsync(int[] actionsIds) {
            return base.Channel.DeleteActionsAsync(actionsIds);
        }
    }
}
