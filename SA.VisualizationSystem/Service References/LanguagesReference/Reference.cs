//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SA.VisualizationSystem.LanguagesReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LanguageData", Namespace="http://schemas.datacontract.org/2004/07/StrategyServices.Languages")]
    [System.SerializableAttribute()]
    public partial class LanguageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LanguageName {
            get {
                return this.LanguageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageNameField, value) != true)) {
                    this.LanguageNameField = value;
                    this.RaisePropertyChanged("LanguageName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LanguagesReference.ILanguageService")]
    public interface ILanguageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/GetLanguages", ReplyAction="http://tempuri.org/ILanguageService/GetLanguagesResponse")]
        string[] GetLanguages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/GetLanguages", ReplyAction="http://tempuri.org/ILanguageService/GetLanguagesResponse")]
        System.Threading.Tasks.Task<string[]> GetLanguagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/GetLanguagesCount", ReplyAction="http://tempuri.org/ILanguageService/GetLanguagesCountResponse")]
        int GetLanguagesCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/GetLanguagesCount", ReplyAction="http://tempuri.org/ILanguageService/GetLanguagesCountResponse")]
        System.Threading.Tasks.Task<int> GetLanguagesCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/GetLanguagesList", ReplyAction="http://tempuri.org/ILanguageService/GetLanguagesListResponse")]
        SA.VisualizationSystem.LanguagesReference.LanguageData[] GetLanguagesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/GetLanguagesList", ReplyAction="http://tempuri.org/ILanguageService/GetLanguagesListResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.LanguagesReference.LanguageData[]> GetLanguagesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/AddLanguages", ReplyAction="http://tempuri.org/ILanguageService/AddLanguagesResponse")]
        void AddLanguages(SA.VisualizationSystem.LanguagesReference.LanguageData[] newLanguages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/AddLanguages", ReplyAction="http://tempuri.org/ILanguageService/AddLanguagesResponse")]
        System.Threading.Tasks.Task AddLanguagesAsync(SA.VisualizationSystem.LanguagesReference.LanguageData[] newLanguages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/EditLanguages", ReplyAction="http://tempuri.org/ILanguageService/EditLanguagesResponse")]
        void EditLanguages(SA.VisualizationSystem.LanguagesReference.LanguageData[] languagesList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/EditLanguages", ReplyAction="http://tempuri.org/ILanguageService/EditLanguagesResponse")]
        System.Threading.Tasks.Task EditLanguagesAsync(SA.VisualizationSystem.LanguagesReference.LanguageData[] languagesList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/DeleteLanguages", ReplyAction="http://tempuri.org/ILanguageService/DeleteLanguagesResponse")]
        void DeleteLanguages(int[] languageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILanguageService/DeleteLanguages", ReplyAction="http://tempuri.org/ILanguageService/DeleteLanguagesResponse")]
        System.Threading.Tasks.Task DeleteLanguagesAsync(int[] languageIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILanguageServiceChannel : SA.VisualizationSystem.LanguagesReference.ILanguageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LanguageServiceClient : System.ServiceModel.ClientBase<SA.VisualizationSystem.LanguagesReference.ILanguageService>, SA.VisualizationSystem.LanguagesReference.ILanguageService {
        
        public LanguageServiceClient() {
        }
        
        public LanguageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LanguageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetLanguages() {
            return base.Channel.GetLanguages();
        }
        
        public System.Threading.Tasks.Task<string[]> GetLanguagesAsync() {
            return base.Channel.GetLanguagesAsync();
        }
        
        public int GetLanguagesCount() {
            return base.Channel.GetLanguagesCount();
        }
        
        public System.Threading.Tasks.Task<int> GetLanguagesCountAsync() {
            return base.Channel.GetLanguagesCountAsync();
        }
        
        public SA.VisualizationSystem.LanguagesReference.LanguageData[] GetLanguagesList() {
            return base.Channel.GetLanguagesList();
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.LanguagesReference.LanguageData[]> GetLanguagesListAsync() {
            return base.Channel.GetLanguagesListAsync();
        }
        
        public void AddLanguages(SA.VisualizationSystem.LanguagesReference.LanguageData[] newLanguages) {
            base.Channel.AddLanguages(newLanguages);
        }
        
        public System.Threading.Tasks.Task AddLanguagesAsync(SA.VisualizationSystem.LanguagesReference.LanguageData[] newLanguages) {
            return base.Channel.AddLanguagesAsync(newLanguages);
        }
        
        public void EditLanguages(SA.VisualizationSystem.LanguagesReference.LanguageData[] languagesList) {
            base.Channel.EditLanguages(languagesList);
        }
        
        public System.Threading.Tasks.Task EditLanguagesAsync(SA.VisualizationSystem.LanguagesReference.LanguageData[] languagesList) {
            return base.Channel.EditLanguagesAsync(languagesList);
        }
        
        public void DeleteLanguages(int[] languageIds) {
            base.Channel.DeleteLanguages(languageIds);
        }
        
        public System.Threading.Tasks.Task DeleteLanguagesAsync(int[] languageIds) {
            return base.Channel.DeleteLanguagesAsync(languageIds);
        }
    }
}
