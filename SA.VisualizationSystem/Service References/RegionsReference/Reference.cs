//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SA.VisualizationSystem.RegionsReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Language", Namespace="http://schemas.datacontract.org/2004/07/DataRepository.Models")]
    public enum Language : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        English = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Russian = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionData", Namespace="http://schemas.datacontract.org/2004/07/StrategyServices.Regions")]
    [System.SerializableAttribute()]
    public partial class RegionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GrossProfitTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IndustryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProfitTaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegionsNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RegionsNamesListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ServicesSectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TourismField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TradeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Cx {
            get {
                return this.CxField;
            }
            set {
                if ((this.CxField.Equals(value) != true)) {
                    this.CxField = value;
                    this.RaisePropertyChanged("Cx");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GrossProfitTax {
            get {
                return this.GrossProfitTaxField;
            }
            set {
                if ((this.GrossProfitTaxField.Equals(value) != true)) {
                    this.GrossProfitTaxField = value;
                    this.RaisePropertyChanged("GrossProfitTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Industry {
            get {
                return this.IndustryField;
            }
            set {
                if ((this.IndustryField.Equals(value) != true)) {
                    this.IndustryField = value;
                    this.RaisePropertyChanged("Industry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProfitTax {
            get {
                return this.ProfitTaxField;
            }
            set {
                if ((this.ProfitTaxField.Equals(value) != true)) {
                    this.ProfitTaxField = value;
                    this.RaisePropertyChanged("ProfitTax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegionsNames {
            get {
                return this.RegionsNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionsNamesField, value) != true)) {
                    this.RegionsNamesField = value;
                    this.RaisePropertyChanged("RegionsNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RegionsNamesList {
            get {
                return this.RegionsNamesListField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionsNamesListField, value) != true)) {
                    this.RegionsNamesListField = value;
                    this.RaisePropertyChanged("RegionsNamesList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ServicesSector {
            get {
                return this.ServicesSectorField;
            }
            set {
                if ((this.ServicesSectorField.Equals(value) != true)) {
                    this.ServicesSectorField = value;
                    this.RaisePropertyChanged("ServicesSector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Tourism {
            get {
                return this.TourismField;
            }
            set {
                if ((this.TourismField.Equals(value) != true)) {
                    this.TourismField = value;
                    this.RaisePropertyChanged("Tourism");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Trade {
            get {
                return this.TradeField;
            }
            set {
                if ((this.TradeField.Equals(value) != true)) {
                    this.TradeField = value;
                    this.RaisePropertyChanged("Trade");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RegionsReference.IRegionService")]
    public interface IRegionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/GetRegionsByLanguage", ReplyAction="http://tempuri.org/IRegionService/GetRegionsByLanguageResponse")]
        SA.VisualizationSystem.RegionsReference.RegionData[] GetRegionsByLanguage(SA.VisualizationSystem.RegionsReference.Language lang, int stateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/GetRegionsByLanguage", ReplyAction="http://tempuri.org/IRegionService/GetRegionsByLanguageResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.RegionsReference.RegionData[]> GetRegionsByLanguageAsync(SA.VisualizationSystem.RegionsReference.Language lang, int stateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/GetRegions", ReplyAction="http://tempuri.org/IRegionService/GetRegionsResponse")]
        SA.VisualizationSystem.RegionsReference.RegionData[] GetRegions(int stateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/GetRegions", ReplyAction="http://tempuri.org/IRegionService/GetRegionsResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.RegionsReference.RegionData[]> GetRegionsAsync(int stateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/AddRegions", ReplyAction="http://tempuri.org/IRegionService/AddRegionsResponse")]
        void AddRegions(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/AddRegions", ReplyAction="http://tempuri.org/IRegionService/AddRegionsResponse")]
        System.Threading.Tasks.Task AddRegionsAsync(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/EditRegions", ReplyAction="http://tempuri.org/IRegionService/EditRegionsResponse")]
        void EditRegions(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/EditRegions", ReplyAction="http://tempuri.org/IRegionService/EditRegionsResponse")]
        System.Threading.Tasks.Task EditRegionsAsync(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/DeleteRegions", ReplyAction="http://tempuri.org/IRegionService/DeleteRegionsResponse")]
        void DeleteRegions(int[] regionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegionService/DeleteRegions", ReplyAction="http://tempuri.org/IRegionService/DeleteRegionsResponse")]
        System.Threading.Tasks.Task DeleteRegionsAsync(int[] regionIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegionServiceChannel : SA.VisualizationSystem.RegionsReference.IRegionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegionServiceClient : System.ServiceModel.ClientBase<SA.VisualizationSystem.RegionsReference.IRegionService>, SA.VisualizationSystem.RegionsReference.IRegionService {
        
        public RegionServiceClient() {
        }
        
        public RegionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RegionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SA.VisualizationSystem.RegionsReference.RegionData[] GetRegionsByLanguage(SA.VisualizationSystem.RegionsReference.Language lang, int stateId) {
            return base.Channel.GetRegionsByLanguage(lang, stateId);
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.RegionsReference.RegionData[]> GetRegionsByLanguageAsync(SA.VisualizationSystem.RegionsReference.Language lang, int stateId) {
            return base.Channel.GetRegionsByLanguageAsync(lang, stateId);
        }
        
        public SA.VisualizationSystem.RegionsReference.RegionData[] GetRegions(int stateId) {
            return base.Channel.GetRegions(stateId);
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.RegionsReference.RegionData[]> GetRegionsAsync(int stateId) {
            return base.Channel.GetRegionsAsync(stateId);
        }
        
        public void AddRegions(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList) {
            base.Channel.AddRegions(regionsList);
        }
        
        public System.Threading.Tasks.Task AddRegionsAsync(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList) {
            return base.Channel.AddRegionsAsync(regionsList);
        }
        
        public void EditRegions(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList) {
            base.Channel.EditRegions(regionsList);
        }
        
        public System.Threading.Tasks.Task EditRegionsAsync(SA.VisualizationSystem.RegionsReference.RegionData[] regionsList) {
            return base.Channel.EditRegionsAsync(regionsList);
        }
        
        public void DeleteRegions(int[] regionIds) {
            base.Channel.DeleteRegions(regionIds);
        }
        
        public System.Threading.Tasks.Task DeleteRegionsAsync(int[] regionIds) {
            return base.Channel.DeleteRegionsAsync(regionIds);
        }
    }
}
