//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SA.VisualizationSystem.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Language", Namespace="http://schemas.datacontract.org/2004/07/DataRepository.Models")]
    public enum Language : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        English = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Russian = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StateData", Namespace="http://schemas.datacontract.org/2004/07/StrategyServices.States")]
    [System.SerializableAttribute()]
    public partial class StateData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CountryCurrencyUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CountryDevelopmentCoefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LicensesExcisesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewsInfluenceCoefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatesNamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CountryCurrencyUnit {
            get {
                return this.CountryCurrencyUnitField;
            }
            set {
                if ((this.CountryCurrencyUnitField.Equals(value) != true)) {
                    this.CountryCurrencyUnitField = value;
                    this.RaisePropertyChanged("CountryCurrencyUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CountryDevelopmentCoef {
            get {
                return this.CountryDevelopmentCoefField;
            }
            set {
                if ((this.CountryDevelopmentCoefField.Equals(value) != true)) {
                    this.CountryDevelopmentCoefField = value;
                    this.RaisePropertyChanged("CountryDevelopmentCoef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LicensesExcises {
            get {
                return this.LicensesExcisesField;
            }
            set {
                if ((this.LicensesExcisesField.Equals(value) != true)) {
                    this.LicensesExcisesField = value;
                    this.RaisePropertyChanged("LicensesExcises");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewsInfluenceCoef {
            get {
                return this.NewsInfluenceCoefField;
            }
            set {
                if ((this.NewsInfluenceCoefField.Equals(value) != true)) {
                    this.NewsInfluenceCoefField = value;
                    this.RaisePropertyChanged("NewsInfluenceCoef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatesNames {
            get {
                return this.StatesNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatesNamesField, value) != true)) {
                    this.StatesNamesField = value;
                    this.RaisePropertyChanged("StatesNames");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IStateService")]
    public interface IStateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/GetStatesByLanguage", ReplyAction="http://tempuri.org/IStateService/GetStatesByLanguageResponse")]
        SA.VisualizationSystem.ServiceReference.StateData[] GetStatesByLanguage(SA.VisualizationSystem.ServiceReference.Language lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/GetStatesByLanguage", ReplyAction="http://tempuri.org/IStateService/GetStatesByLanguageResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.ServiceReference.StateData[]> GetStatesByLanguageAsync(SA.VisualizationSystem.ServiceReference.Language lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/GetStates", ReplyAction="http://tempuri.org/IStateService/GetStatesResponse")]
        SA.VisualizationSystem.ServiceReference.StateData[] GetStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/GetStates", ReplyAction="http://tempuri.org/IStateService/GetStatesResponse")]
        System.Threading.Tasks.Task<SA.VisualizationSystem.ServiceReference.StateData[]> GetStatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/AddStates", ReplyAction="http://tempuri.org/IStateService/AddStatesResponse")]
        void AddStates(SA.VisualizationSystem.ServiceReference.StateData[] statesList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/AddStates", ReplyAction="http://tempuri.org/IStateService/AddStatesResponse")]
        System.Threading.Tasks.Task AddStatesAsync(SA.VisualizationSystem.ServiceReference.StateData[] statesList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/EditStates", ReplyAction="http://tempuri.org/IStateService/EditStatesResponse")]
        void EditStates(SA.VisualizationSystem.ServiceReference.StateData[] states);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/EditStates", ReplyAction="http://tempuri.org/IStateService/EditStatesResponse")]
        System.Threading.Tasks.Task EditStatesAsync(SA.VisualizationSystem.ServiceReference.StateData[] states);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/DeleteStates", ReplyAction="http://tempuri.org/IStateService/DeleteStatesResponse")]
        void DeleteStates(int[] stateIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStateService/DeleteStates", ReplyAction="http://tempuri.org/IStateService/DeleteStatesResponse")]
        System.Threading.Tasks.Task DeleteStatesAsync(int[] stateIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStateServiceChannel : SA.VisualizationSystem.ServiceReference.IStateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StateServiceClient : System.ServiceModel.ClientBase<SA.VisualizationSystem.ServiceReference.IStateService>, SA.VisualizationSystem.ServiceReference.IStateService {
        
        public StateServiceClient() {
        }
        
        public StateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SA.VisualizationSystem.ServiceReference.StateData[] GetStatesByLanguage(SA.VisualizationSystem.ServiceReference.Language lang) {
            return base.Channel.GetStatesByLanguage(lang);
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.ServiceReference.StateData[]> GetStatesByLanguageAsync(SA.VisualizationSystem.ServiceReference.Language lang) {
            return base.Channel.GetStatesByLanguageAsync(lang);
        }
        
        public SA.VisualizationSystem.ServiceReference.StateData[] GetStates() {
            return base.Channel.GetStates();
        }
        
        public System.Threading.Tasks.Task<SA.VisualizationSystem.ServiceReference.StateData[]> GetStatesAsync() {
            return base.Channel.GetStatesAsync();
        }
        
        public void AddStates(SA.VisualizationSystem.ServiceReference.StateData[] statesList) {
            base.Channel.AddStates(statesList);
        }
        
        public System.Threading.Tasks.Task AddStatesAsync(SA.VisualizationSystem.ServiceReference.StateData[] statesList) {
            return base.Channel.AddStatesAsync(statesList);
        }
        
        public void EditStates(SA.VisualizationSystem.ServiceReference.StateData[] states) {
            base.Channel.EditStates(states);
        }
        
        public System.Threading.Tasks.Task EditStatesAsync(SA.VisualizationSystem.ServiceReference.StateData[] states) {
            return base.Channel.EditStatesAsync(states);
        }
        
        public void DeleteStates(int[] stateIds) {
            base.Channel.DeleteStates(stateIds);
        }
        
        public System.Threading.Tasks.Task DeleteStatesAsync(int[] stateIds) {
            return base.Channel.DeleteStatesAsync(stateIds);
        }
    }
}
